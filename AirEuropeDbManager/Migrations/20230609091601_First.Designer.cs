// <auto-generated />
using System;
using AirEuropeDbManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirEuropeDbManager.Migrations
{
    [DbContext(typeof(AirEuropeDbContext))]
    [Migration("20230609091601_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirEuropeDbManager.Data.AirRoute", b =>
                {
                    b.Property<int>("AirRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirRouteId"));

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalAirportId")
                        .HasColumnType("int");

                    b.Property<int>("DepartureAirportId")
                        .HasColumnType("int");

                    b.HasKey("AirRouteId");

                    b.HasIndex("AircraftId");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.ToTable("AirRoutes");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Aircraft", b =>
                {
                    b.Property<int>("AircraftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AircraftId"));

                    b.HasKey("AircraftId");

                    b.ToTable("Aircrafts");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Airport", b =>
                {
                    b.Property<int>("AirportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirportId"));

                    b.HasKey("AirportId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppUserId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"));

                    b.Property<int>("AirRouteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime2");

                    b.HasKey("FlightId");

                    b.HasIndex("AirRouteId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FlightId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.ReservedSeat", b =>
                {
                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("SeatId", "ReservationId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservedSeats");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int?>("AircraftId")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("AircraftId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.AirRoute", b =>
                {
                    b.HasOne("AirEuropeDbManager.Data.Aircraft", "Aircraft")
                        .WithMany("AirRoutes")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirEuropeDbManager.Data.Airport", "ArrivalAirport")
                        .WithMany("ArrivalAirports")
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirEuropeDbManager.Data.Airport", "DepartureAirport")
                        .WithMany("DepartureAirports")
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Flight", b =>
                {
                    b.HasOne("AirEuropeDbManager.Data.AirRoute", "AirRoute")
                        .WithMany()
                        .HasForeignKey("AirRouteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AirRoute");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Reservation", b =>
                {
                    b.HasOne("AirEuropeDbManager.Data.AppUser", "AppUser")
                        .WithMany("Reservations")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirEuropeDbManager.Data.Flight", "Flight")
                        .WithMany("Reservations")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.ReservedSeat", b =>
                {
                    b.HasOne("AirEuropeDbManager.Data.Reservation", "Reservation")
                        .WithMany("ReservedSeats")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AirEuropeDbManager.Data.Seat", "Seat")
                        .WithMany("ReservedSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Seat", b =>
                {
                    b.HasOne("AirEuropeDbManager.Data.Aircraft", null)
                        .WithMany("Seats")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Aircraft", b =>
                {
                    b.Navigation("AirRoutes");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Airport", b =>
                {
                    b.Navigation("ArrivalAirports");

                    b.Navigation("DepartureAirports");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.AppUser", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Flight", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Reservation", b =>
                {
                    b.Navigation("ReservedSeats");
                });

            modelBuilder.Entity("AirEuropeDbManager.Data.Seat", b =>
                {
                    b.Navigation("ReservedSeats");
                });
#pragma warning restore 612, 618
        }
    }
}
